c
route_path
user_path
c
@params
route_path
exit
route_path
user_path
user_path.match?(route_path)
@path
exit
"/tests/1".match(/\/tests\/(\w+)\Z/)
"/tests/1".match?(/\/tests\/(\w+)\Z/)
"/tests/1".match?(/\/tests\/(\w+)/)
"/tests/1".match?(/\/tests\/(\w+)/Z)
/tests/1.match?(/\/tests\/(\w+)/)
"/tests/1".match?(/\/tests\/(\w+)/)
"/tests/1".match?("/\/tests\/(\w+)/")
"/tests/1".match? "/\/tests\/(\w+)/"
"/tests/1".match?('/\/tests\/(\w+)/')
route_path
"/tests/1".match?(route_path)
"/tests/1".match?("/\/tests\/(\w+)/")
user_path.match?(route_path)
route_path
user_path
c
route_path
user_path
@path
exit
Hash[keys.captures.zip(values.captures)]
Hash[*keys.captures.zip(values.captures)]
keys.captures.zip(values.captures)
values.captures
keys.captures
keys.captures.zip(values.captures)
keys.captures
keys
keys.names
@path
c
@path
exit
keys
values
route_path
user_path
user_path.match?(route_path)
@path
exit
values
keys
@path
c
@path
path
c
keys
values
c
keys
exit
route_path
@path
route_path
keys
route_path
c
route_path
values
route_path
c
@router
@router.route_for(env)
c
@routes.find { |route| route.match?(method, path) }
c
route
c
@routes.find { |route| route.match?(method, path) }
path
@routes
c
@router.route_for(env)
env
@router
route
c
@method == method && correct_path?(path)
c
@method == method && correct_path?(path)
correct_path?(path)
c
@path
path
correct_path?(path)
c
correct_path?(path)
exit
c
correct_path?(path)
@method == method
@method
c
@routes.find { |route| route.match?(method, path) }
c
route
c
@params
c
@path
c
@path
path
exit
@params
c
route
c
@path
path
c
@path
user_path
route_path
@params
c
exit
user_path
path
@params
params
c
@path
path
c
@path
path
exit
@path
path
@params
exit
path.each { |string| @params.push(string) if string.start_with?(':') }
path = @path.split('/')
@params
path.each { |string| @params.push(string) if string.start_with?(':') }
params(path)
path = path.split('/')
path
@path
c
@path
exit
c
@path
c
@path
path
exit
correct_params_count?(path)
@path
path
c
@path
path
exit
@path
path
@path.split('/').size
path.split('/').size 
correct_params_count?(path)
exit
@method
@path
path
exit
method
@routes
exit
@routes
@path
@routes
@route
exit
@routes
env
env['PATH_INFO']
@request
@path
exit
route.map { |param| param?(param) ? '[[:alnum:]]' :param }
route = params(@path)
params(@path)
@path
exit
@routes
exit
env['PATH_INFO']
env['PATH_INFO'])
env
exit
@path
exctract_params(@path)
exit
correct_path
correct_path?(path)
path
exit
path
method
@routes[2]
@routes[0]
@routes[1]
@routes.find { |route| route.match?(method, path) 
@routes
route
exit
@method
method
path
exit
@path
exit
@params
@request.env['PATH_INFO'].split('/')[2]
@request.env['PATH_INFO']
